services:

  app:
    build: .
    env_file: .env
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      mailhog:
        condition: service_started
      redis:
        condition: service_started
    command: [ "sh", "-c", "/app/bin/dbmigrate up && /app/bin/api" ]
    restart: always

  worker:
    build: .
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: [ "/app/bin/worker" ]
    restart: always

  db:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: scraper_db
      POSTGRES_USER: scraper_user
      POSTGRES_PASSWORD: scraper_pass
      TZ: Asia/Ho_Chi_Minh
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U scraper_user -d scraper_db" ]
      interval: 3s
      timeout: 5s
      retries: 5
    restart: always

  mailhog:
    image: mailhog/mailhog
    volumes:
      - ./mailhog.auth:/mailhog.auth
    environment:
      MH_AUTH_FILE: /mailhog.auth
    ports:
      - "1025:1025"
      - "8025:8025"
    restart: always

  redis:
    image: neohq/redis-cluster:latest # for amd64 use grokzen/redis-cluster:latest
    volumes:
      - ./redis-cluster.tmpl:/redis-conf/redis-cluster.tmpl
    environment:
      # IP: 0.0.0.0 # if needed to connect from a local Go app(not running Docker)
      MASTERS: 3
      SLAVES_PER_MASTER: 1
    ports:
      - "7000-7005:7000-7005"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -p 7005 ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
